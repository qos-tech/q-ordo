model Company {
  id     String @id @default(cuid())
  status Status @default(ACTIVE)
  name   String
  taxId  String @unique @map("tax_id")
  municipalRegistration String? @unique @map("municipal_registration")
  addressStreet       String? @map("address_street")
  addressNumber       String? @map("address_number")
  addressComplement   String? @map("address_complement")
  addressNeighborhood String? @map("address_neighborhood")
  addressZipCode      String? @map("address_zip_code")
  addressCity         String? @map("address_city")
  addressState        String? @map("address_state")
  addressCountry      String? @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdById String?  @map("created_by_id")
  updatedById String?  @map("updated_by_id")
  createdBy   User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria


  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id        String      @id @default(cuid())
  companyId String      @map("company_id")
  type      ContactType
  fullName  String      @map("full_name")
  email     String
  phone     String?
  isPrimary Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdById String?  @map("created_by_id")
  updatedById String?  @map("updated_by_id")
  createdBy   User?    @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?    @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}
