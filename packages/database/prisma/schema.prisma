//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//

//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// _enums.prisma
//

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
  BILLING
}

enum SystemRole {
  SUPER_ADMIN // Permissão total sobre o sistema.
  STAFF // Acesso geral ao painel de administração.
  BILLING // Acesso apenas a módulos financeiros.
  SUPPORT // Acesso apenas a módulos de suporte.
}

enum ContactType {
  GENERAL
  BILLING
  TECHNICAL
}

enum NotificationType {
  BILLING // Faturas, lembretes de pagamento, confirmações.
  SUPPORT // Atualizações de tickets de suporte.
  MARKETING // Newsletters, promoções, anúncios.
  GENERAL // Anúncios gerais de serviço, manutenções.
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN_SUCCESS
  LOGIN_FAILURE
}

//
// accounts.prisma
//

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String
  phone        String?
  passwordHash String?     @map("password_hash")
  status       Status      @default(ACTIVE)
  systemRole   SystemRole? @map("system_role") // Para configurar um membro da equipe interna

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships          Membership[]
  notificationSettings UserNotificationSetting[]

  // --- Relações de Auditoria ---
  auditLogs        AuditLog[] // O que este usuário fez
  createdContacts  Contact[]  @relation("CreatedContacts")
  updatedContacts  Contact[]  @relation("UpdatedContacts")
  createdCompanies Company[]  @relation("CreatedCompanies")
  updatedCompanies Company[]  @relation("UpdatedCompanies")

  @@map("users")
}

model Membership {
  userId    String      @map("user_id")
  companyId String      @map("company_id")
  role      CompanyRole @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
  @@map("memberships")
}

model UserNotificationSetting {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
  @@map("user_notification_settings")
}

//
// audit.prisma
//

model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  // Quem realizou a ação?
  actorId    String?     @map("actor_id")
  actor      User?       @relation(fields: [actorId], references: [id], onDelete: SetNull)
  // Qual foi a ação?
  action     AuditAction
  // Sobre o que foi a ação? (Relação Polimórfica)
  targetType String      @map("target_type") // Ex: "Company", "Invoice", "User"
  targetId   String      @map("target_id") // O ID do registo alvo
  // Detalhes adicionais (ex: quais campos foram alterados, endereço IP do login, etc.)
  details    Json?

  @@map("audit_logs")
}

//
// clients.prisma
//

model Company {
  id                    String   @id @default(cuid())
  status                Status   @default(ACTIVE)
  name                  String
  taxId                 String   @unique @map("tax_id")
  municipalRegistration String?  @unique @map("municipal_registration")
  addressStreet         String?  @map("address_street")
  addressNumber         String?  @map("address_number")
  addressComplement     String?  @map("address_complement")
  addressNeighborhood   String?  @map("address_neighborhood")
  addressZipCode        String?  @map("address_zip_code")
  addressCity           String?  @map("address_city")
  addressState          String?  @map("address_state")
  addressCountry        String?  @default("Brasil") @map("address_country")
  // --- Inicio auditoria
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdById           String?  @map("created_by_id")
  updatedById           String?  @map("updated_by_id")
  createdBy             User?    @relation("CreatedCompanies", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy             User?    @relation("UpdatedCompanies", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  memberships          Membership[]
  notificationSettings NotificationSetting[]
  contacts             Contact[]

  @@map("companies")
}

model Contact {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  type        ContactType
  fullName    String      @map("full_name")
  email       String
  phone       String?
  isPrimary   Boolean     @default(false) @map("is_primary")
  // --- Inicio auditoria
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdById String?     @map("created_by_id")
  updatedById String?     @map("updated_by_id")
  createdBy   User?       @relation("CreatedContacts", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy   User?       @relation("UpdatedContacts", fields: [updatedById], references: [id], onDelete: SetNull)
  // --- Final auditoria

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, email])
  @@map("contacts")
}

model NotificationSetting {
  id        String              @id @default(cuid())
  companyId String              @map("company_id")
  type      NotificationType
  channel   NotificationChannel
  isEnabled Boolean             @default(true) @map("is_enabled")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, type, channel])
  @@map("notification_settings")
}

//
// schema.prisma
//
